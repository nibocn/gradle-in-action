apply plugin: 'war'

ext.versionFile = file('version.properties')

task loadVersion {
    logger.quiet "exec loadVersion task"
    version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet "Reading the version file."

    if (!versionFile.exists()) {
        throw new GradleException("Requiredi version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(),
            versionProps.release.toBoolean())
}

task printVersion(group: "versioning", description: "Prints project version.") {
    doLast {
        logger.quiet "Version: $version"
    }
}

task makeReleaseVersion(group: "versioning", description: "Makes project a release version.") {
    doLast {
        version.release = true
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        println versionFile.name
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) {
    doLast {
        logger.quiet "Releasing the project..."
    }
}

tasks.addRule("Pattern: increment<classifier>Version - Increments the project version classifier. Allowed types: ['Major', 'Minor']") { String taskName ->
    if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) {
            doLast {
                String classifier = (taskName - 'increment' - 'Version').toLowerCase()
                String currentVersion = version.toString()

                switch(classifier) {
                    case 'major':
                        ++version.major
                        break
                    case 'minor':
                        ++version.minor
                        break
                    default:
                        throw new GradleException("Invalid version type '$classifier'. Allowed types: ['Major', 'Minor']")
                }

                String newVersion = version.toString()
                logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"

                ant.propertyfile(file: versionFile) {
                    entry(key: classifier, type: 'int', operation: '+', value: 1)
                }
            }
        }
    }
}


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}
