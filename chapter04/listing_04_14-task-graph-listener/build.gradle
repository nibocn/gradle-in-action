apply plugin: 'war'

ext.versionFile = file('version.properties')

task loadVersion {
    logger.quiet "exec loadVersion task"
    version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet "Reading the version file."

    if (!versionFile.exists()) {
        throw new GradleException("Requiredi version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(),
            versionProps.release.toBoolean())
}

task printVersion(group: "versioning", description: "Prints project version.") {
    doLast {
        logger.quiet "Version: $version"
    }
}

task createDistribution(type: Zip) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        println versionFile.name
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) {
    doLast {
        logger.quiet "Releasing the project..."
    }
}

class ReleaseVersionListener implements TaskExecutionGraphListener {
    final static String releaseTaskPath = ':release'

    @Override
    void graphPopulated(TaskExecutionGraph taskGraph) {
        if (taskGraph.hasTask(releaseTaskPath)) {
            List<Task> allTasks = taskGraph.allTasks
            Task releaseTask = allTasks.find { it.path == releaseTaskPath }
            Project project = releaseTask.project

            if (!project.version.release) {
                project.version.release = true
                project.ant.propertyfile(file: project.versionFile) {
                    entry(key: 'release', type: 'string', operation: '=', value: 'true')
                }
            }
        }
    }
}

gradle.taskGraph.addTaskExecutionGraphListener(new ReleaseVersionListener())


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}
